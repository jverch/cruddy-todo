'use strict';

var fs = require('fs');
var path = require('path');
var _ = require('underscore');
var counter = require('./counter');
var Promise = require('bluebird');
Promise.promisifyAll(fs);

var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////

exports.create = function (text, callback) {
  counter.getNextUniqueId(function (err, id) {
    fs.writeFileAsync(exports.dataDir + '/' + id + '.txt', text).then(function () {
      callback(null, { id: id, text: text });
    });
  });
};

exports.readOne = function (id, callback) {
  fs.readdirAsync(exports.dataDir).then(function (files) {
    if (!_.contains(files, id + '.txt')) {
      callback('Error', null);
    } else {
      fs.readFileAsync(exports.dataDir + '/' + id + '.txt', 'utf8').then(function (data) {
        callback(null, { id: id, text: data });
      });
    }
  });
};

exports.readAll = function (callback) {
  fs.readdirAsync(exports.dataDir).then(function (files) {
    var promises = _.map(files, function (file) {
      return fs.readFileAsync(exports.dataDir + '/' + file, 'utf8').then(function (data) {
        return { id: file.slice(0, 5), text: data };
      });
    });
    Promise.all(promises).then(function (array) {
      callback(null, array);
    });
  });
};

exports.update = function (id, text, callback) {
  fs.readdirAsync(exports.dataDir).then(function (files) {
    if (!_.contains(files, id + '.txt')) {
      callback('Error', null);
    } else {
      fs.writeFileAsync(exports.dataDir + '/' + id + '.txt', text).then(function () {
        callback(null, { id: id, text: text });
      });
    }
  });
};

exports.delete = function (id, callback) {
  fs.readdirAsync(exports.dataDir).then(function (files) {
    if (!_.contains(files, id + '.txt')) {
      callback('Error', null);
    } else {
      fs.unlinkAsync(exports.dataDir + '/' + id + '.txt').then(function () {
        return callback();
      });
    }
  });
};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');

exports.initialize = function () {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2RhdGFzdG9yZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiXyIsImNvdW50ZXIiLCJQcm9taXNlIiwicHJvbWlzaWZ5QWxsIiwiaXRlbXMiLCJleHBvcnRzIiwiY3JlYXRlIiwidGV4dCIsImNhbGxiYWNrIiwiZ2V0TmV4dFVuaXF1ZUlkIiwiZXJyIiwiaWQiLCJ3cml0ZUZpbGVBc3luYyIsImRhdGFEaXIiLCJ0aGVuIiwicmVhZE9uZSIsInJlYWRkaXJBc3luYyIsImNvbnRhaW5zIiwiZmlsZXMiLCJyZWFkRmlsZUFzeW5jIiwiZGF0YSIsInJlYWRBbGwiLCJwcm9taXNlcyIsIm1hcCIsImZpbGUiLCJzbGljZSIsImFsbCIsImFycmF5IiwidXBkYXRlIiwiZGVsZXRlIiwidW5saW5rQXN5bmMiLCJqb2luIiwiX19kaXJuYW1lIiwiaW5pdGlhbGl6ZSIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNQyxPQUFPRCxRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU1FLElBQUlGLFFBQVEsWUFBUixDQUFWO0FBQ0EsSUFBTUcsVUFBVUgsUUFBUSxXQUFSLENBQWhCO0FBQ0EsSUFBSUksVUFBVUosUUFBUSxVQUFSLENBQWQ7QUFDQUksUUFBUUMsWUFBUixDQUFxQk4sRUFBckI7O0FBRUEsSUFBSU8sUUFBUSxFQUFaOztBQUVBOztBQUVBQyxRQUFRQyxNQUFSLEdBQWlCLFVBQUNDLElBQUQsRUFBT0MsUUFBUCxFQUFvQjtBQUNuQ1AsVUFBUVEsZUFBUixDQUF3QixVQUFDQyxHQUFELEVBQU1DLEVBQU4sRUFBYTtBQUNuQ2QsT0FBR2UsY0FBSCxDQUFxQlAsUUFBUVEsT0FBN0IsU0FBd0NGLEVBQXhDLFdBQWtESixJQUFsRCxFQUF3RE8sSUFBeEQsQ0FBNkQsWUFBTTtBQUNqRU4sZUFBUyxJQUFULEVBQWUsRUFBRUcsSUFBSUEs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QUFFQTNCLFFBQVE0QixVQUFSLEdBQXFCLFlBQU07QUFDekIsTUFBSSxDQUFDcEMsR0FBR3FDLFVBQUgsQ0FBYzdCLFFBQVFRLE9BQXRCLENBQUwsRUFBcUM7QUFDbkNoQixPQUFHc0MsU0FBSCxDQUFhOUIsUUFBUVEsT0FBckI7QUFDRDtBQUNGLENBSkQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbmNvbnN0IGNvdW50ZXIgPSByZXF1aXJlKCcuL2NvdW50ZXInKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcblByb21pc2UucHJvbWlzaWZ5QWxsKGZzKTtcblxudmFyIGl0ZW1zID0ge307XG5cbi8vIFB1YmxpYyBBUEkgLSBGaXggdGhlc2UgQ1JVRCBmdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydHMuY3JlYXRlID0gKHRleHQsIGNhbGxiYWNrKSA9PiB7XG4gIGNvdW50ZXIuZ2V0TmV4dFVuaXF1ZUlkKChlcnIsIGlkKSA9PiB7XG4gICAgZnMud3JpdGVGaWxlQXN5bmMoYCR7ZXhwb3J0cy5kYXRhRGlyfS8ke2lkfS50eHRgLCB0ZXh0KS50aGVuKCgpID0+IHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHsgaWQ6IGlkLCB0ZXh0OiB0ZXh0IH0pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmV4cG9ydHMucmVhZE9uZSA9IChpZCwgY2FsbGJhY2spID0+IHtcbiAgZnMucmVhZGRpckFzeW5jKGV4cG9ydHMuZGF0YURpcikudGhlbihmaWxlcyA9PiB7XG4gICAgaWYgKCFfLmNvbnRhaW5zKGZpbGVzLCBgJHtpZH0udHh0YCkpIHtcbiAgICAgIGNhbGxiYWNrKCdFcnJvcicsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcy5yZWFkRmlsZUFzeW5jKGAke2V4cG9ydHMuZGF0YURpcn0vJHtpZH0udHh0YCwgJ3V0ZjgnKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICBjYWxsYmFjayhudWxsLCB7IGlkOiBpZCwgdGV4dDogZGF0YSB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnRzLnJlYWRBbGwgPSBjYWxsYmFjayA9PiB7XG4gIGZzLnJlYWRkaXJBc3luYyhleHBvcnRzLmRhdGFEaXIpLnRoZW4oZmlsZXMgPT4ge1xuICAgIHZhciBwcm9taXNlcyA9IF8ubWFwKGZpbGVzLCBmaWxlID0+IHtcbiAgICAgIHJldHVybiBmc1xuICAgICAgICAucmVhZEZpbGVBc3luYyhgJHtleHBvcnRzLmRhdGFEaXJ9LyR7ZmlsZX1gLCAndXRmOCcpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4geyBpZDogZmlsZS5zbGljZSgwLCA1KSwgdGV4dDogZGF0YSB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgYXJyYXkpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmV4cG9ydHMudXBkYXRlID0gKGlkLCB0ZXh0LCBjYWxsYmFjaykgPT4ge1xuICBmcy5yZWFkZGlyQXN5bmMoZXhwb3J0cy5kYXRhRGlyKS50aGVuKGZpbGVzID0+IHtcbiAgICBpZiAoIV8uY29udGFpbnMoZmlsZXMsIGAke2lkfS50eHRgKSkge1xuICAgICAgY2FsbGJhY2soJ0Vycm9yJywgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZzLndyaXRlRmlsZUFzeW5jKGAke2V4cG9ydHMuZGF0YURpcn0vJHtpZH0udHh0YCwgdGV4dCkudGhlbigoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHsgaWQ6IGlkLCB0ZXh0OiB0ZXh0IH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydHMuZGVsZXRlID0gKGlkLCBjYWxsYmFjaykgPT4ge1xuICBmcy5yZWFkZGlyQXN5bmMoZXhwb3J0cy5kYXRhRGlyKS50aGVuKGZpbGVzID0+IHtcbiAgICBpZiAoIV8uY29udGFpbnMoZmlsZXMsIGAke2lkfS50eHRgKSkge1xuICAgICAgY2FsbGJhY2soJ0Vycm9yJywgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZzLnVubGlua0FzeW5jKGAke2V4cG9ydHMuZGF0YURpcn0vJHtpZH0udHh0YCkudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIENvbmZpZytJbml0aWFsaXphdGlvbiBjb2RlIC0tIERPIE5PVCBNT0RJRlkgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydHMuZGF0YURpciA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdkYXRhJyk7XG5cbmV4cG9ydHMuaW5pdGlhbGl6ZSA9ICgpID0+IHtcbiAgaWYgKCFmcy5leGlzdHNTeW5jKGV4cG9ydHMuZGF0YURpcikpIHtcbiAgICBmcy5ta2RpclN5bmMoZXhwb3J0cy5kYXRhRGlyKTtcbiAgfVxufTtcbiJdfQ==