'use strict';

// Todo Model //////////////////////////////////////////////////////////////////

var Todo = require('./datastore');

// Configure Express ///////////////////////////////////////////////////////////

var bodyParser = require('body-parser');
var express = require('express');
var morgan = require('morgan');
var path = require('path');

var app = express();
app.use(morgan('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, './public')));

// RESTful Routes for CRUD operations //////////////////////////////////////////

// Create (Crud) -- collection route
app.post('/todo', function (req, res) {
  Todo.create(req.body.todoText, function (err, newTodo) {
    res.status(201).json(newTodo);
  });
});

// Read all (cRud) -- collection route
app.get('/todo', function (req, res) {
  Todo.readAll(function (err, todos) {
    res.status(200).json(todos);
  });
});

// Read one (cRud) -- member route
app.get('/todo/:id', function (req, res) {
  Todo.readOne(req.params.id, function (err, todo) {
    if (todo) {
      res.status(200).json(todo);
    } else {
      res.sendStatus(404);
    }
  });
});

// Update (crUd) -- member route
app.put('/todo/:id', function (req, res) {
  Todo.update(req.params.id, req.body.todoText, function (err, todo) {
    if (todo) {
      res.status(200).json(todo);
    } else {
      res.sendStatus(404);
    }
  });
});

// Delete (cruD) -- member route
app.delete('/todo/:id', function (req, res) {
  Todo.delete(req.params.id, function (err) {
    if (err) {
      res.sendStatus(404);
    } else {
      res.sendStatus(204);
    }
  });
});

// Start & Initialize Web Server ///////////////////////////////////////////////

var port = 3000;
app.listen(port, function () {
  console.log('CRUDdy Todo server is running in the terminal');
  console.log('To get started, visit: http://localhost:' + port);
});

Todo.initialize();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJUb2RvIiwicmVxdWlyZSIsImJvZHlQYXJzZXIiLCJleHByZXNzIiwibW9yZ2FuIiwicGF0aCIsImFwcCIsInVzZSIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJzdGF0aWMiLCJqb2luIiwiX19kaXJuYW1lIiwicG9zdCIsInJlcSIsInJlcyIsImNyZWF0ZSIsImJvZHkiLCJ0b2RvVGV4dCIsImVyciIsIm5ld1RvZG8iLCJzdGF0dXMiLCJnZXQiLCJyZWFkQWxsIiwidG9kb3MiLCJyZWFkT25lIiwicGFyYW1zIiwiaWQiLCJ0b2RvIiwic2VuZFN0YXR1cyIsInB1dCIsInVwZGF0ZSIsImRlbGV0ZSIsInBvcnQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiaW5pdGlhbGl6ZSJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLGFBQVIsQ0FBYjs7QUFFQTs7QUFFQSxJQUFNQyxhQUFhRCxRQUFRLGFBQVIsQ0FBbkI7QUFDQSxJQUFNRSxVQUFVRixRQUFRLFNBQVIsQ0FBaEI7QUFDQSxJQUFNRyxTQUFTSCxRQUFRLFFBQVIsQ0FBZjtBQUNBLElBQU1JLE9BQU9KLFFBQVEsTUFBUixDQUFiOztBQUVBLElBQU1LLE1BQU1ILFNBQVo7QUFDQUcsSUFBSUMsR0FBSixDQUFRSCxPQUFPLEtBQVAsQ0FBUjtBQUNBRSxJQUFJQyxHQUFKLENBQVFMLFdBQVdNLElBQVgsRUFBUjtBQUNBRixJQUFJQyxHQUFKLENBQVFMLFdBQVdPLFVBQVgsQ0FBc0IsRUFBQ0MsVUFBVSxLQUFYLEVBQXRCLENBQVI7QUFDQUosSUFBSUMsR0FBSixDQUFRSixRQUFRUSxNQUFSLENBQWVOLEtBQUtPLElBQUwsQ0FBVUMsU0FBVixFQUFxQixVQUFyQixDQUFmLENBQVI7O0FBRUE7O0FBRUE7QUFDQVAsSUFBSVEsSUFBSixDQUFTLE9BQVQsRUFBa0IsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDOUJoQixPQUFLaUIsTUFBTCxDQUFZRixJQUFJRyxJQUFKLENBQVNDLFFBQXJCLEVBQStCLFVBQUNDLEdBQUQsRUFBTUMsT0FBTixFQUFrQjtBQUMvQ0wsUUFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JkLElBQWhCLENBQXFCYSxPQUFyQjtBQUNELEdBRkQ7QUFHRCxDQUpEOztBQU1BO0FBQ0FmLElBQUlpQixHQUFKLENBQVEsT0FBUixFQUFpQixVQUFDUixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUM3QmhCLE9BQUt3QixPQUFMLENBQWEsVUFBQ0osR0FBRCxFQUFNSyxLQUFOLEVBQWdCO0FBQzNCVCxRQUFJTSxNQUFKLENBQVcsR0FBWCxFQUFnQmQsSUFBaEIsQ0FBcUJpQixLQUFyQjtBQUNELEdBRkQ7QUFHRCxDQUpEOztBQU1BO0FBQ0FuQixJQUFJaUIsR0FBSixDQUFRLFdBQVIsRUFBcUIsVUFBQ1IsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDakNoQixPQUFLMEIsT0FBTCxDQUFhWCxJQUFJWSxNQUFKLENBQVdDLEVBQXhCLEVBQTRCLFVBQUNSLEdBQUQsRUFBTVMsSUFBTixFQUFlO0FBQ3pDLFFBQUlBLElBQUosRUFBVTtBQUNSYixVQUFJTSxNQUFKLENBQVcsR0FBWCxFQUFnQmQsSUFBaEIsQ0FBcUJxQixJQUFyQjtBQUNELEtBRkQsTUFFTztBQUNMYixVQUFJYyxVQUFKLENBQWUsR0FBZjtBQUNEO0FBQ0YsR0FORDtBQU9ELENBUkQ7O0FBVUE7QUFDQXhCLElBQUl5QixHQUFKLENBQVEsV0FBUixFQUFxQixVQUFDaEIsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDakNoQixPQUFLZ0MsTUFBTCxDQUFZakIsSUFBSVksTUFBSixDQUFXQyxFQUF2QixFQUEyQmIsSUFBSUcsSUFBSixDQUFTQyxRQUFwQyxFQUE4QyxVQUFDQyxHQUFELEVBQU1TLElBQU4sRUFBZTtBQUMzRCxRQUFJQSxJQUFKLEVBQVU7QUFDUmIsVUFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JkLElBQWhCLENBQXFCcUIsSUFBckI7QUFDRCxLQUZELE1BRU87QUFDTGIsVUFBSWMsVUFBSixDQUFlLEdBQWY7QUFDRDtBQUNGLEdBTkQ7QUFPRCxDQVJEOztBQVVBO0FBQ0F4QixJQUFJMkIsTUFBSixDQUFXLFdBQVgsRUFBd0IsVUFBQ2xCLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ3BDaEIsT0FBS2lDLE1BQUwsQ0FBWWxCLElBQUlZLE1BQUosQ0FBV0MsRUFBdkIsRUFBMkIsVUFBQ1IsR0FBRCxFQUFTO0FBQ2xDLFFBQUlBLEdBQUosRUFBUztBQUNQSixVQUFJYyxVQUFKLENBQWUsR0FBZjtBQUNELEtBRkQsTUFFTztBQUNMZCxVQUFJYyxVQUFKLENBQWUsR0FBZjtBQUNEO0FBQ0YsR0FORDtBQU9ELENBUkQ7O0FBVUE7O0FBRUEsSUFBTUksT0FBTyxJQUFiO0FBQ0E1QixJQUFJNkIsTUFBSixDQUFXRCxJQUFYLEVBQWlCLFlBQU07QUFDckJFLFVBQVFDLEdBQVIsQ0FBWSwrQ0FBWjtBQUNBRCxVQUFRQyxHQUFSLDhDQUF1REgsSUFBdkQ7QUFDRCxDQUhEOztBQUtBbEMsS0FBS3NDLFVBQUwiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBUb2RvIE1vZGVsIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5jb25zdCBUb2RvID0gcmVxdWlyZSgnLi9kYXRhc3RvcmUnKTtcblxuLy8gQ29uZmlndXJlIEV4cHJlc3MgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgbW9yZ2FuID0gcmVxdWlyZSgnbW9yZ2FuJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5hcHAudXNlKG1vcmdhbignZGV2JykpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7ZXh0ZW5kZWQ6IGZhbHNlfSkpO1xuYXBwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi9wdWJsaWMnKSkpO1xuXG4vLyBSRVNUZnVsIFJvdXRlcyBmb3IgQ1JVRCBvcGVyYXRpb25zIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vLyBDcmVhdGUgKENydWQpIC0tIGNvbGxlY3Rpb24gcm91dGVcbmFwcC5wb3N0KCcvdG9kbycsIChyZXEsIHJlcykgPT4ge1xuICBUb2RvLmNyZWF0ZShyZXEuYm9keS50b2RvVGV4dCwgKGVyciwgbmV3VG9kbykgPT4ge1xuICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKG5ld1RvZG8pO1xuICB9KTtcbn0pO1xuXG4vLyBSZWFkIGFsbCAoY1J1ZCkgLS0gY29sbGVjdGlvbiByb3V0ZVxuYXBwLmdldCgnL3RvZG8nLCAocmVxLCByZXMpID0+IHtcbiAgVG9kby5yZWFkQWxsKChlcnIsIHRvZG9zKSA9PiB7XG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24odG9kb3MpO1xuICB9KTtcbn0pO1xuXG4vLyBSZWFkIG9uZSAoY1J1ZCkgLS0gbWVtYmVyIHJvdXRlXG5hcHAuZ2V0KCcvdG9kby86aWQnLCAocmVxLCByZXMpID0+IHtcbiAgVG9kby5yZWFkT25lKHJlcS5wYXJhbXMuaWQsIChlcnIsIHRvZG8pID0+IHtcbiAgICBpZiAodG9kbykge1xuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24odG9kbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5zZW5kU3RhdHVzKDQwNCk7XG4gICAgfVxuICB9KTtcbn0pO1xuXG4vLyBVcGRhdGUgKGNyVWQpIC0tIG1lbWJlciByb3V0ZVxuYXBwLnB1dCgnL3RvZG8vOmlkJywgKHJlcSwgcmVzKSA9PiB7XG4gIFRvZG8udXBkYXRlKHJlcS5wYXJhbXMuaWQsIHJlcS5ib2R5LnRvZG9UZXh0LCAoZXJyLCB0b2RvKSA9PiB7XG4gICAgaWYgKHRvZG8pIHtcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHRvZG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMuc2VuZFN0YXR1cyg0MDQpO1xuICAgIH1cbiAgfSk7XG59KTtcblxuLy8gRGVsZXRlIChjcnVEKSAtLSBtZW1iZXIgcm91dGVcbmFwcC5kZWxldGUoJy90b2RvLzppZCcsIChyZXEsIHJlcykgPT4ge1xuICBUb2RvLmRlbGV0ZShyZXEucGFyYW1zLmlkLCAoZXJyKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmVzLnNlbmRTdGF0dXMoNDA0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnNlbmRTdGF0dXMoMjA0KTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbi8vIFN0YXJ0ICYgSW5pdGlhbGl6ZSBXZWIgU2VydmVyIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmNvbnN0IHBvcnQgPSAzMDAwO1xuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdDUlVEZHkgVG9kbyBzZXJ2ZXIgaXMgcnVubmluZyBpbiB0aGUgdGVybWluYWwnKTtcbiAgY29uc29sZS5sb2coYFRvIGdldCBzdGFydGVkLCB2aXNpdDogaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9YCk7XG59KTtcblxuVG9kby5pbml0aWFsaXplKCk7XG4iXX0=